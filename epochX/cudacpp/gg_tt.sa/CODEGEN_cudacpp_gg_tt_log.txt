[1;31mNote that this is a development version.
This version is intended for development/beta testing and NOT for production.
This version has not been fully tested (if at all) and might have limited user support (if at all)[0m
Running MG5 in debug mode
************************************************************
*                                                          *
*                     W E L C O M E to                     *
*              M A D G R A P H 5 _ a M C @ N L O           *
*                                                          *
*                                                          *
*                 *                       *                *
*                   *        * *        *                  *
*                     * * * * 5 * * * *                    *
*                   *        * *        *                  *
*                 *                       *                *
*                                                          *
*         VERSION 3.4.0_lo_vect         2022-05-06         *
[1;31m*                                                          *[1;0m
[1;31m*          WARNING: UNKNOWN DEVELOPMENT VERSION.           *[1;0m
[1;31m*            WARNING: DO NOT USE FOR PRODUCTION            *[1;0m
[1;31m*                                                          *[1;0m
*                                                          *
*    The MadGraph5_aMC@NLO Development Team - Find us at   *
*    https://server06.fynu.ucl.ac.be/projects/madgraph     *
*                            and                           *
*            http://amcatnlo.web.cern.ch/amcatnlo/         *
*                                                          *
*               Type 'help' for in-line help.              *
*           Type 'tutorial' to learn how MG5 works         *
*    Type 'tutorial aMCatNLO' to learn how aMC@NLO works   *
*    Type 'tutorial MadLoop' to learn how MadLoop works    *
*                                                          *
************************************************************
load MG5 configuration from input/mg5_configuration.txt 
fastjet-config does not seem to correspond to a valid fastjet-config executable (v3+). We will use fjcore instead.
 Please set the 'fastjet'variable to the full (absolute) /PATH/TO/fastjet-config (including fastjet-config).
 MG5_aMC> set fastjet /PATH/TO/fastjet-config

lhapdf-config does not seem to correspond to a valid lhapdf-config executable. 
Please set the 'lhapdf' variable to the (absolute) /PATH/TO/lhapdf-config (including lhapdf-config).
Note that you can still compile and run aMC@NLO with the built-in PDFs
 MG5_aMC> set lhapdf /PATH/TO/lhapdf-config

None does not seem to correspond to a valid lhapdf-config executable. 
Please set the 'lhapdf' variable to the (absolute) /PATH/TO/lhapdf-config (including lhapdf-config).
Note that you can still compile and run aMC@NLO with the built-in PDFs
 MG5_aMC> set lhapdf /PATH/TO/lhapdf-config

No valid eps viewer found. Please set in ./input/mg5_configuration.txt
Using default web browser "firefox". Set another one in ./input/mg5_configuration.txt
import /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt.mg
The import format was not given, so we guess it as command
set stdout_level DEBUG
set output information to level: 10
set zerowidth_tchannel F
generate g g > t t~
No model currently active, so we import the Standard Model
INFO: load particles 
INFO: load vertices 
[1;32mDEBUG: model prefixing  takes 0.0068628787994384766 [0m
INFO: Restrict model sm with file models/sm/restrict_default.dat . 
[1;32mDEBUG: Simplifying conditional expressions [0m
[1;32mDEBUG: remove interactions: u s w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: u b w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: c d w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: c b w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: t d w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: t s w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: s u w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: b u w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: d c w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: b c w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: d t w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: s t w+ at order: QED=1 [0m
[1;32mDEBUG: remove interactions: c c h at order: QED=1 [0m
[1;32mDEBUG: remove interactions: e- e- h at order: QED=1 [0m
[1;32mDEBUG: remove interactions: mu- mu- h at order: QED=1 [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_100', 1), ('GC_104', 1), ('GC_108', 1), ('GC_40', 1), ('GC_41', 1), ('GC_45', 1), ('GC_49', 1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_21', 1), ('GC_27', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_15', 1), ('GC_30', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_38', 1), ('GC_39', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_3', 1), ('GC_4', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_50', 1), ('GC_51', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_54', 1), ('GC_56', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_66', 1), ('GC_67', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_70', 1), ('GC_73', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_74', 1), ('GC_75', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_77', 1), ('GC_78', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_76', 1), ('GC_79', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_7', 1), ('GC_9', -1)  [0m
[1;32mDEBUG:  Fuse the Following coupling (they have the same value): ('GC_96', 1), ('GC_97', -1)  [0m
[1;32mDEBUG: remove parameters: mdl_lamWS [0m
[1;32mDEBUG: remove parameters: mdl_AWS [0m
[1;32mDEBUG: remove parameters: mdl_rhoWS [0m
[1;32mDEBUG: remove parameters: mdl_etaWS [0m
[1;32mDEBUG: remove parameters: mdl_ymc [0m
[1;32mDEBUG: remove parameters: mdl_yme [0m
[1;32mDEBUG: remove parameters: mdl_ymm [0m
[1;32mDEBUG: remove parameters: mdl_MC [0m
[1;32mDEBUG: remove parameters: mdl_Me [0m
[1;32mDEBUG: remove parameters: mdl_MM [0m
[1;32mDEBUG: remove parameters: mdl_WTau [0m
[1;32mDEBUG: remove parameters: mdl_lamWS__exp__2 [0m
[1;32mDEBUG: remove parameters: mdl_CKM1x2 [0m
[1;32mDEBUG: remove parameters: mdl_lamWS__exp__3 [0m
[1;32mDEBUG: remove parameters: mdl_CKM1x3 [0m
[1;32mDEBUG: remove parameters: mdl_CKM2x1 [0m
[1;32mDEBUG: remove parameters: mdl_CKM2x3 [0m
[1;32mDEBUG: remove parameters: mdl_CKM3x1 [0m
[1;32mDEBUG: remove parameters: mdl_CKM3x2 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM1x3 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM2x3 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM2x1 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM3x1 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM3x2 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM1x2 [0m
[1;32mDEBUG: remove parameters: mdl_yc [0m
[1;32mDEBUG: remove parameters: mdl_ye [0m
[1;32mDEBUG: remove parameters: mdl_ym [0m
[1;32mDEBUG: remove parameters: mdl_I1x31 [0m
[1;32mDEBUG: remove parameters: mdl_I1x32 [0m
[1;32mDEBUG: remove parameters: mdl_I2x12 [0m
[1;32mDEBUG: remove parameters: mdl_I2x13 [0m
[1;32mDEBUG: remove parameters: mdl_I2x22 [0m
[1;32mDEBUG: remove parameters: mdl_I2x23 [0m
[1;32mDEBUG: remove parameters: mdl_I2x32 [0m
[1;32mDEBUG: remove parameters: mdl_I3x21 [0m
[1;32mDEBUG: remove parameters: mdl_I3x22 [0m
[1;32mDEBUG: remove parameters: mdl_I3x23 [0m
[1;32mDEBUG: remove parameters: mdl_I3x31 [0m
[1;32mDEBUG: remove parameters: mdl_I3x32 [0m
[1;32mDEBUG: remove parameters: mdl_I4x13 [0m
[1;32mDEBUG: remove parameters: mdl_I4x23 [0m
[1;32mDEBUG: remove parameters: mdl_CKM1x1 [0m
[1;32mDEBUG: remove parameters: mdl_CKM2x2 [0m
[1;32mDEBUG: fix parameter value: mdl_CKM3x3 [0m
[1;32mDEBUG: fix parameter value: mdl_conjg__CKM3x3 [0m
[1;32mDEBUG: remove parameters: mdl_conjg__CKM2x2 [0m
[1;32mDEBUG: fix parameter value: mdl_conjg__CKM1x1 [0m
INFO: Change particles name to pass to MG5 convention 
Defined multiparticle p = g u c d s u~ c~ d~ s~
Defined multiparticle j = g u c d s u~ c~ d~ s~
Defined multiparticle l+ = e+ mu+
Defined multiparticle l- = e- mu-
Defined multiparticle vl = ve vm vt
Defined multiparticle vl~ = ve~ vm~ vt~
Defined multiparticle all = g u c d s u~ c~ d~ s~ a ve vm vt e- mu- ve~ vm~ vt~ e+ mu+ t b t~ b~ z w+ h w- ta- ta+
INFO: Checking for minimal orders which gives processes. 
INFO: Please specify coupling orders to bypass this step. 
INFO: Trying coupling order WEIGHTED<=2: WEIGTHED IS QCD+2*QED 
INFO: Trying process: g g > t t~ WEIGHTED<=2 @1  
INFO: Process has 3 diagrams 
1 processes with 3 diagrams generated in 0.010 s
Total: 1 processes with 3 diagrams
output standalone_cudacpp CODEGEN_cudacpp_gg_tt
Load PLUGIN.CUDACPP_SA_OUTPUT
[1mOutput will be done with PLUGIN: CUDACPP_SA_OUTPUT[0m
[1;32mDEBUG:  cformat = [0m plugin [1;30m[export_cpp.py at line 3071][0m [0m
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.__init__ (initialise the exporter) [1;30m[output.py at line 141][0m [0m
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.copy_template (initialise the directory) [1;30m[output.py at line 146][0m [0m
INFO: Creating subdirectories in directory /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt 
INFO: Organizing processes into subprocess groups 
INFO: Generating Helas calls for process: g g > t t~ WEIGHTED<=2 @1 
INFO: Processing color information for process: g g > t t~ @1 
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.generate_subprocess_directory (create the directory) [1;30m[output.py at line 171][0m [0m
[1;32mDEBUG:    type(subproc_group)=<class 'madgraph.core.helas_objects.HelasMatrixElement'> [1;30m[output.py at line 172][0m [0m
[1;32mDEBUG:    type(fortran_model)=<class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_GPUFOHelasCallWriter'> [1;30m[output.py at line 173][0m [0m
[1;32mDEBUG:    type(me)=<class 'int'> me=0 [1;30m[output.py at line 174][0m [0m
INFO: Creating files in directory /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/SubProcesses/P1_Sigma_sm_gg_ttx 
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.generate_process_files [1;30m[model_handling.py at line 1210][0m [0m
[1;32mDEBUG:  self.include_multi_channel is not yet defined: this is standalone_cudacpp mode [1;30m[model_handling.py at line 1214][0m [0m
FileWriter <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_CPPWriter'> for /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/SubProcesses/P1_Sigma_sm_gg_ttx/./CPPProcess.h
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.write_process_h_file [1;30m[model_handling.py at line 1354][0m [0m
FileWriter <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_CPPWriter'> for /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/SubProcesses/P1_Sigma_sm_gg_ttx/./CPPProcess.cc
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.write_process_cc_file [1;30m[model_handling.py at line 1384][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.get_sigmaKin_lines [1;30m[model_handling.py at line 1058][0m [0m
[1;32mDEBUG:  self.include_multi_channel = [0m False [1;30m[model_handling.py at line 1059][0m [0m
[1;32mDEBUG:  self.support_multichannel = [0m True [1;30m[model_handling.py at line 1060][0m [0m
[1;32mDEBUG:  type(self.helas_call_writer) = [0m <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_GPUFOHelasCallWriter'> [1;30m[model_handling.py at line 1167][0m [0m
[1;32mDEBUG:  self.support_multichannel, self.include_multi_channel = [0m True False [1;30m[model_handling.py at line 1168][0m [0m
[1;32mDEBUG:  multi_channel_map = [0m None [1;30m[model_handling.py at line 1563][0m [0m
[1;32mDEBUG:  diag_to_config = [0m {} [1;30m[model_handling.py at line 1619][0m [0m
[1;32mDEBUG:  call = [0m vxxxxx( momenta,m_pars->%s, cHel[ihel][%d],%+d, w_sv[%d], %d ); [1;30m[model_handling.py at line 1731][0m [0m
[1;32mDEBUG:  ('ZERO', 0, -1, 0, 0) [1;30m[model_handling.py at line 1732][0m [0m
[1;32mDEBUG:  call = [0m vxxxxx( momenta,m_pars->%s, cHel[ihel][%d],%+d, w_sv[%d], %d ); [1;30m[model_handling.py at line 1731][0m [0m
[1;32mDEBUG:  ('ZERO', 1, -1, 1, 1) [1;30m[model_handling.py at line 1732][0m [0m
INFO: Created files CPPProcess.h and CPPProcess.cc in directory /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/SubProcesses/P1_Sigma_sm_gg_ttx/. 
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_CMakeLists [1;30m[model_handling.py at line 1242][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_check_sa [1;30m[model_handling.py at line 1251][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_mgonGPU [1;30m[model_handling.py at line 1268][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_processidfile [1;30m[model_handling.py at line 1288][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_testxxx [1;30m[model_handling.py at line 1300][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_memorybuffers [1;30m[model_handling.py at line 1311][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_memoryaccesscouplings [1;30m[model_handling.py at line 1342][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_matrixelementkernel [1;30m[model_handling.py at line 1322][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.get_sigmaKin_lines [1;30m[model_handling.py at line 1058][0m [0m
[1;32mDEBUG:  self.include_multi_channel = [0m False [1;30m[model_handling.py at line 1059][0m [0m
[1;32mDEBUG:  self.support_multichannel = [0m True [1;30m[model_handling.py at line 1060][0m [0m
[1;32mDEBUG:  replace_dict = [0m {'sigmaKin_lines': '    // PART 0 - INITIALISATION (before calculate_wavefunctions)\n    // Reset the "matrix elements" - running sums of |M|^2 over helicities for the given event\n    // FIXME: assume process.nprocesses == 1 for the moment (eventually: need a loop over processes here?)\n#ifdef __CUDACC__\n    allMEs[ievt] = 0;\n#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n    allNumerators[ievt] = 0;\n    allDenominators[ievt] = 0;\n#endif\n#else\n    cudaMemSet(allMEs, 0, nevt*sizeof(fptype);\n#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n    cudaMemSet(allNumerators, 0, nevt*sizeof(fptype);\n    cudaMemSet(allDenominators, 0, nevt*sizeof(fptype);\n#endif\n      }\n    }\n#endif\n\n    // PART 1 - HELICITY LOOP: CALCULATE WAVEFUNCTIONS\n    // (in both CUDA and C++, using precomputed good helicities)\n    // FIXME: assume process.nprocesses == 1 for the moment (eventually: need a loop over processes here?)\n    for( int ighel = 0; ighel < cNGoodHel; ighel++ )\n    {\n      const int ihel = cGoodHel[ighel];\n#ifdef __CUDACC__\n#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n      calculate_wavefunctions<<<m_gpublocks, m_gputhreads>>>( ihel, allmomenta, allcouplings, allMEs, allNumerators, allDenominators, channelId );\n#else\n      calculate_wavefunctions<<<m_gpublocks, m_gputhreads>>>( ihel, allmomenta, allcouplings, allMEs );\n#endif\n#else\n#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n      calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, allNumerators, allDenominators, channelId, nevt );\n#else\n      calculate_wavefunctions(ihel,allmomenta, allcouplings, allMEs, nevt );\n#endif\n#endif\n      //if ( ighel == 0 ) break; // TEST sectors/requests (issue #16)\n    }\n\n// TODO-OM: See how to handle the renormalization here...\n// Dedicated kernel or move it within each calculate_wavefunctions? \n\n    // PART 2 - FINALISATION (after calculate_wavefunctions)\n    // Get the final |M|^2 as an average over helicities/colors of the running sum of |M|^2 over helicities for the given event\n    // [NB \'sum over final spins, average over initial spins\', eg see\n    // https://www.uzh.ch/cmsssl/physik/dam/jcr:2e24b7b1-f4d7-4160-817e-47b13dbf1d7c/Handout_4_2016-UZH.pdf]\n    // FIXME: assume process.nprocesses == 1 for the moment (eventually: need a loop over processes here?)\n#ifdef __CUDACC__\n    normalise_output<<<m_gpublocks, m_gputhreads>>>(all_ME, allNumerators, allDenominators);\n//    allMEs[ievt] /= denominators[0]; // FIXME (#343): assume nprocesses == 1\n//#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n//    if( channelId > 0 ) allMEs[ievt] *= allNumerators[ievt] / allDenominators[ievt]; // FIXME (#343): assume nprocesses == 1\n#endif\n#else\n    for( int ipagV = 0; ipagV < npagV; ++ipagV )\n    {\n      for( int ieppV = 0; ieppV < neppV; ieppV++ )\n      {\n        const unsigned int ievt = ipagV * neppV + ieppV;\n        allMEs[ievt] /= denominators[0];                                                 // FIXME (#343): assume nprocesses == 1\n#ifdef MGONGPU_SUPPORTS_MULTICHANNEL\n        if( channelId > 0 ) allMEs[ievt] *= allNumerators[ievt] / allDenominators[ievt]; // FIXME (#343): assume nprocesses == 1\n#endif\n        //printf( "sigmaKin: ievt=%2d me=%f\\n", ievt, allMEs[ievt] );\n      }\n    }\n#endif\n    mgDebugFinalise();\n  }\n\n  //--------------------------------------------------------------------------\n\n', 'ncomb': 16, 'process_class_name': 'Sigma_sm_gg_ttx', 'id1': 21, 'id2': 21, 'helicity_matrix': '    static constexpr short helicities[ncomb][mgOnGpu::npar] = {\n      { -1, -1, -1, -1 },\n      { -1, -1, -1, 1 },\n      { -1, -1, 1, -1 },\n      { -1, -1, 1, 1 },\n      { -1, 1, -1, -1 },\n      { -1, 1, -1, 1 },\n      { -1, 1, 1, -1 },\n      { -1, 1, 1, 1 },\n      { 1, -1, -1, -1 },\n      { 1, -1, -1, 1 },\n      { 1, -1, 1, -1 },\n      { 1, -1, 1, 1 },\n      { 1, 1, -1, -1 },\n      { 1, 1, -1, 1 },\n      { 1, 1, 1, -1 },\n      { 1, 1, 1, 1 } };', 'den_factors': '256', 'get_matrix_t_lines': 't[0]=matrix_1_gg_ttx();', 'madE_var_reset': '', 'madE_caclwfcts_call': '', 'madE_update_answer': '', 'get_mirror_matrix_lines': '', 'nproc': 1, 'nb_amp': 3, 'nexternal': 4} [1;30m[model_handling.py at line 1333][0m [0m
[1;32mDEBUG:  other_dict = [0m {'ncomb': 16, 'process_class_name': 'Sigma_sm_gg_ttx', 'id1': 21, 'id2': 21, 'helicity_matrix': '    static constexpr short helicities[ncomb][mgOnGpu::npar] = {\n      { -1, -1, -1, -1 },\n      { -1, -1, -1, 1 },\n      { -1, -1, 1, -1 },\n      { -1, -1, 1, 1 },\n      { -1, 1, -1, -1 },\n      { -1, 1, -1, 1 },\n      { -1, 1, 1, -1 },\n      { -1, 1, 1, 1 },\n      { 1, -1, -1, -1 },\n      { 1, -1, -1, 1 },\n      { 1, -1, 1, -1 },\n      { 1, -1, 1, 1 },\n      { 1, 1, -1, -1 },\n      { 1, 1, -1, 1 },\n      { 1, 1, 1, -1 },\n      { 1, 1, 1, 1 } };', 'den_factors': '256', 'get_matrix_t_lines': 't[0]=matrix_1_gg_ttx();', 'madE_var_reset': '', 'madE_caclwfcts_call': '', 'madE_update_answer': '', 'get_mirror_matrix_lines': '', 'nproc': 1, 'nb_amp': 3, 'nexternal': 4} [1;30m[model_handling.py at line 1334][0m [0m
Generated helas calls for 1 subprocesses (3 diagrams) in 0.007 s
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.convert_model (create the model) [1;30m[output.py at line 179][0m [0m
ALOHA: aloha starts to compute helicity amplitudes
ALOHA: aloha creates VVV1 set of routines with options: P0[0m
ALOHA: aloha creates FFV1 routines[0m
ALOHA: aloha creates 2 routines in  0.174 s
<class 'aloha.create_aloha.AbstractRoutine'> VVV1
<class 'aloha.create_aloha.AbstractRoutine'> FFV1
<class 'aloha.create_aloha.AbstractRoutine'> FFV1
<class 'aloha.create_aloha.AbstractRoutine'> FFV1
FileWriter <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_CPPWriter'> for /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/./HelAmps_sm.h
INFO: Created file HelAmps_sm.h in directory /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/. 
FileWriter <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_CPPWriter'> for /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/./Parameters_sm.h
FileWriter <class 'PLUGIN.CUDACPP_SA_OUTPUT.model_handling.PLUGIN_CPPWriter'> for /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/./Parameters_sm.cc
INFO: Created files Parameters_sm.h and Parameters_sm.cc in directory 
INFO: /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/. and /data/avalassi/GPU2020/MG5aMC/ghav-mg5amcnlo/CODEGEN_cudacpp_gg_tt/src/. 
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.finalize [1;30m[output.py at line 188][0m [0m
quit

real	0m0.955s
user	0m0.699s
sys	0m0.071s
